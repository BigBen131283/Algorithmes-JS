function flatten(arr) {
  // [1, {}, [3, [[4]]]]
  //  si ce n'est pas un tableau on push l'Ã©lÃ©ment dans flattenedArray, si c'est un tableau on rappelle la fonction, et ainsi de suite jusqu'Ã  ce qu'on tombe sur un Ã©lÃ©ment
    const flattenedArray = []

    const arrayFlattener = arg => {
      if(Array.isArray(arg)) {
        for(let i = 0; i < arg.length; i++) {
          arrayFlattener(arg[i])
        }
      } else {
        flattenedArray.push(arg)
      }
    }
    
    arr.forEach(arrayFlattener)

    return flattenedArray
}


/* Ã‰NONCÃ‰ ðŸ“š */

/*
  Cet algorithme prend un tableau composÃ© lui-mÃªme de plusieurs sous-tableaux en
  entrÃ©e.
  Vous devez "aplatir" les diffÃ©rentes couches de tableaux, c'est-Ã -dire
  retourner un seul tableau qui contient les valeurs de tous les tableaux qui le
  composent.
  Attention : Ne pas utiliser la mÃ©thode JavaScript "flat()", il faut trouver une solution personnalisÃ©e.
*/


/* Tests Ã  passer ðŸ§ª */
console.log(flatten([1, {}, [3, [[4]]]]))              // [1, {}, 3, 4]
console.log(flatten([1, [2], [3, [[4]]]]))             // [1,2,3,4]
console.log(flatten([1, [], [3, [[4]]]]))              // [1, 3, 4]
console.log(flatten([1, {}, [3, [[4]]]]))              // [1, {}, 3, 4]